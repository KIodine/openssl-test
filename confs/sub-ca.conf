# ---
#   Custom CA config file practicing.
#   This file is used for sub CA performing:
#   - `ca`: 
#       - leaf cert issuing.
#   - `req`:
#       - CSR generating.
# ---
[default]
name                    = sub-ca               # U
domain                  = example.com           # U
aia_url = http://${name}.${domain}/${name}.crt  # U
crl_url = http://${name}.${domain}/${name}.crl  # U
ocsp_url = https://ocsp.${name}.${domain}:9081  # U
# --- Setup default config for `ca` subcmd ---
default_ca              = ca_default_opt
name_opt                = utf8,esc_ctrl,multiline,lname,align
# --- End setup ---


[ca_reqdn]
countryName             = "AB"
organizationName        = "Test-Cert"
commonName              = "Test-Cert imm CA"
# NOTE: For non-leaf certs, `commonName` does not have to be
#   the domain name, ex. `*.example.com`.
#   For leaf certs, you must choose a `commonName` matches your
#   domain name.
#   If you utilize the same cert on other domain, use extension
#   `subjectAltName` to cover those names.

# `req` exclusive.
[req]
# User will supply key.
default_md              = sha256
utf8                    = yes
string_mask             = utf8only
prompt                  = no # Just read values supplied in config file.
distinguished_name      = ca_reqdn
req_extensions          = ca_selfsign_ext

# Request CA for giving ability of signing intermediate CAs.
# Also the default ext option for generating CSRs.
# --- NOTE: Must manually switch-on when doing selfsigning,
#   default option does not approve requested extensions.
[ca_selfsign_ext]
basicConstraints        = critical,CA:true
keyUsage                = critical,keyCertSign,cRLSign
subjectKeyIdentifier    = hash

# Default config for `ca` subcmd, user must supply which extension
# to use.
# --- NOTE: If official document does not encourage the use of `ca`,
#   that is the correct approach of signing requests? `x509`?
[ca_default_opt]
home                    = . # U
database                = ${home}/db/index
serial                  = ${home}/db/serial
crlnumber               = ${home}/db/crlnumber
certificate             = ${home}/${name}.crt
private_key             = ${home}/private/${name}.key
RANDFILE                = ${home}/private/random
new_certs_dir           = ${home}/certs
unique_subject          = no
# `none` for not adopting extensions from CSRs.
# `copy` for approving extenstions CA does not set, such as
# `subjectAltName`.
copy_extensions         = copy
default_days            = 365
default_crl_days        = 30
default_md              = sha256
policy                  = ca_sign_dn_policy
# workaround for not copying extension datas.
email_in_dn             = no
# See `root-ca.conf` for why comment out this line.
#rand_serial             = yes

# Limitations when root CA signing certs.
[ca_sign_dn_policy]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

# TODO: Read the spec.
[crl_info]
URI.0                   = ${crl_url}

# TODO: Read the spec.
[issuer_info]
caIssuers;URI.0         = ${aia_url}
OCSP;URI.0              = ${ocsp_url}

[name_constraints]
#permitted;DNS.0=example.com
#permitted;DNS.1=example.org
excluded;IP.0=0.0.0.0/0.0.0.0
excluded;IP.1=0:0:0:0:0:0:0:0/0:0:0:0:0:0:0:0

# `ca` subcmd config.
# For signing OCSP certs, gives no ability for generating any CA.
[ocsp_sign_ext]
authorityKeyIdentifier  = keyid:always
basicConstraints        = critical,CA:false
extendedKeyUsage        = OCSPSigning
keyUsage                = critical,digitalSignature
subjectKeyIdentifier    = hash

# Sub CA use, will override CSR extensions?
# -> If `default_ca::copy_extension` is set, CA will only overwrite
#    those set in these extension sections.
[server_ext]
authorityInfoAccess     = @issuer_info
authorityKeyIdentifier  = keyid:always
basicConstraints        = critical,CA:false
crlDistributionPoints   = @crl_info
extendedKeyUsage        = clientAuth,serverAuth
keyUsage                = critical,digitalSignature,keyEncipherment
subjectKeyIdentifier    = hash

[client_ext]
authorityInfoAccess     = @issuer_info
authorityKeyIdentifier  = keyid:always
basicConstraints        = critical,CA:false
crlDistributionPoints   = @crl_info
extendedKeyUsage        = clientAuth
keyUsage                = critical,digitalSignature
subjectKeyIdentifier    = hash

# keyUsage options:
#   - digitalSignature
#   - nonRepudiation
#   - keyEncipherment
#   - dataEncipherment
#   - keyAgreement
#   - keyCertSign
#   - cRLSign
#   - encipherOnly
#   - decipherOnly
